=begin comment

Demo Client for Passmeister Apple Wallet and Google Wallet API

[www.passmeister.com](https://www.passmeister.com).

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::SwaggerClient::PassApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::SwaggerClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::SwaggerClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# create_or_update_pass
#
# This method creates or (if the pass id already exists) updates a pass, so you don't have to track ids and creation status of your passes.
# 
# @param object $pass_type_id your pass type id, for example P963493 (Urban Fitness) (required)
# @param object $pass_id id of the pass (provided by you when creating the pass or automatically set by passmeister) (optional)
{
    my $params = {
    'pass_type_id' => {
        data_type => 'object',
        description => 'your pass type id, for example P963493 (Urban Fitness)',
        required => '1',
    },
    'pass_id' => {
        data_type => 'object',
        description => 'id of the pass (provided by you when creating the pass or automatically set by passmeister)',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_or_update_pass' } = { 
    	summary => 'This method creates or (if the pass id already exists) updates a pass, so you don&#39;t have to track ids and creation status of your passes.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub create_or_update_pass {
    my ($self, %args) = @_;

    # verify the required parameter 'pass_type_id' is set
    unless (exists $args{'pass_type_id'}) {
      croak("Missing the required parameter 'pass_type_id' when calling create_or_update_pass");
    }

    # parse inputs
    my $_resource_path = '/pass';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'pass_type_id'}) {
        $query_params->{'passTypeId'} = $self->{api_client}->to_query_value($args{'pass_type_id'});
    }

    # query params
    if ( exists $args{'pass_id'}) {
        $query_params->{'passId'} = $self->{api_client}->to_query_value($args{'pass_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_pass
#
# Delete pass by pass id.
# 
# @param object $pass_type_id your pass type id, for example P963493 (Urban Fitness) (required)
# @param object $pass_id id of the pass (required)
{
    my $params = {
    'pass_type_id' => {
        data_type => 'object',
        description => 'your pass type id, for example P963493 (Urban Fitness)',
        required => '1',
    },
    'pass_id' => {
        data_type => 'object',
        description => 'id of the pass',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_pass' } = { 
    	summary => 'Delete pass by pass id.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_pass {
    my ($self, %args) = @_;

    # verify the required parameter 'pass_type_id' is set
    unless (exists $args{'pass_type_id'}) {
      croak("Missing the required parameter 'pass_type_id' when calling delete_pass");
    }

    # verify the required parameter 'pass_id' is set
    unless (exists $args{'pass_id'}) {
      croak("Missing the required parameter 'pass_id' when calling delete_pass");
    }

    # parse inputs
    my $_resource_path = '/pass';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'pass_type_id'}) {
        $query_params->{'passTypeId'} = $self->{api_client}->to_query_value($args{'pass_type_id'});
    }

    # query params
    if ( exists $args{'pass_id'}) {
        $query_params->{'passId'} = $self->{api_client}->to_query_value($args{'pass_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# get_pass
#
# Get pass information by pass id.
# 
# @param object $pass_type_id your pass type id, for example P963493 (Urban Fitness) (required)
# @param object $pass_id id of the pass (required)
{
    my $params = {
    'pass_type_id' => {
        data_type => 'object',
        description => 'your pass type id, for example P963493 (Urban Fitness)',
        required => '1',
    },
    'pass_id' => {
        data_type => 'object',
        description => 'id of the pass',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_pass' } = { 
    	summary => 'Get pass information by pass id.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub get_pass {
    my ($self, %args) = @_;

    # verify the required parameter 'pass_type_id' is set
    unless (exists $args{'pass_type_id'}) {
      croak("Missing the required parameter 'pass_type_id' when calling get_pass");
    }

    # verify the required parameter 'pass_id' is set
    unless (exists $args{'pass_id'}) {
      croak("Missing the required parameter 'pass_id' when calling get_pass");
    }

    # parse inputs
    my $_resource_path = '/pass';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'pass_type_id'}) {
        $query_params->{'passTypeId'} = $self->{api_client}->to_query_value($args{'pass_type_id'});
    }

    # query params
    if ( exists $args{'pass_id'}) {
        $query_params->{'passId'} = $self->{api_client}->to_query_value($args{'pass_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# pass_list
#
# Retrieve the list of active pass ids for a given pass type.
# 
# @param object $pass_type_id your pass type id, for example P963493 (Urban Fitness) (required)
# @param object $page  (optional)
# @param object $limit  (optional)
{
    my $params = {
    'pass_type_id' => {
        data_type => 'object',
        description => 'your pass type id, for example P963493 (Urban Fitness)',
        required => '1',
    },
    'page' => {
        data_type => 'object',
        description => '',
        required => '0',
    },
    'limit' => {
        data_type => 'object',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'pass_list' } = { 
    	summary => 'Retrieve the list of active pass ids for a given pass type.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub pass_list {
    my ($self, %args) = @_;

    # verify the required parameter 'pass_type_id' is set
    unless (exists $args{'pass_type_id'}) {
      croak("Missing the required parameter 'pass_type_id' when calling pass_list");
    }

    # parse inputs
    my $_resource_path = '/pass/list';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'pass_type_id'}) {
        $query_params->{'passTypeId'} = $self->{api_client}->to_query_value($args{'pass_type_id'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# pass_sync
#
# Send updates to all active passes for a given pass type.
# 
# @param object $pass_type_id your pass type id, for example P963493 (Urban Fitness) (required)
{
    my $params = {
    'pass_type_id' => {
        data_type => 'object',
        description => 'your pass type id, for example P963493 (Urban Fitness)',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'pass_sync' } = { 
    	summary => 'Send updates to all active passes for a given pass type.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub pass_sync {
    my ($self, %args) = @_;

    # verify the required parameter 'pass_type_id' is set
    unless (exists $args{'pass_type_id'}) {
      croak("Missing the required parameter 'pass_type_id' when calling pass_sync");
    }

    # parse inputs
    my $_resource_path = '/pass/sync';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'pass_type_id'}) {
        $query_params->{'passTypeId'} = $self->{api_client}->to_query_value($args{'pass_type_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
